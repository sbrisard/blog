# -*- coding: utf-8; -*-
#+SETUPFILE: "../include/css-1.org"
#+SETUPFILE: "../include/mathjax.org"
#+TITLE: Orientation correlations among rice grains, part 7: analysis of the shape of the grains
#+DATE: [2016-02-19 Fri]
#+PROPERTY: header-args:ipython :session :eval no-export :exports both

In the [[file:20150930-Orientation_correlations_among_rice_grains-06.org][previous instalment]] of this series, we have segmented the 3D image of the assembly of rice grains. In other words, each voxel of the image is attributed the label of the grain to which it belongs. Remember the [[file:20150223-Orientation_correlations_among_rice_grains-01.org][initial goal]] of this series: we want to quantify orientation /correlations/ between grains. To do so, we must analyse the orientation of each individual grain. This is the topic of the present post.

It is customary to define the orientation of an elongated object by means of the eigenvectors of the tensor of second moments, defined as follows

\begin{equation}
\label{eq:1}J_{ij} = \int_\text{Grain}\left(x_i-X_i\right)\left(x_j-X_j\right)\diff x_1\,\diff x_2\,\diff x_3,
\end{equation}
where the integral is carried out over the grain, and $X_i$ denotes the $i$-th coordinate of the grain's center of mass

\begin{equation}
\label{eq:2}X_i = \frac1V\int_\text{Grain}x_i\,\diff x_1\,\diff x_2\,\diff x_3
\end{equation}

($V$: volume of the grain). In coordinate-free form, Eq. \eqref{eq:1} reads

\begin{equation}
\label{eq:3}\tens J=\int_\text{Grain}\left(\vec x-\vec X\right)\otimes\left(\vec x-\vec X\right)\diff x_1\,\diff x_2\,\diff x_3.
\end{equation}

The above defined tensor of second moments is related to the [[https://en.wikipedia.org/wiki/Moment_of_inertia#The_inertia_tensor][inertia tensor]] $\tens I$
\begin{equation}
\label{eq:4}\tens I=\tr\tens J\,\tens\delta-\tens J,
\end{equation}
where $\tens I$ is defined as follows
\begin{equation}
\label{eq:5}\tens I=\int_\text{Grain}\left[\left(\vec x-\vec X\right)\cdot\left(\vec x-\vec X\right)\tens\delta-\left(\vec x-\vec X\right)\otimes\left(\vec x-\vec X\right)\right]\diff x_1\,\diff x_2\,\diff x_3.
\end{equation}

Being symmetric, the tensor $\tens J$ of second moments is diagonalizable, and we compute its eigenvalues $J_a$, $J_b$ and $J_c$, and the associated eigenvectors $\vec v_a$, $\vec v_b$ and $\vec v_c$

\begin{equation}
\tens J\cdot\vec v_\alpha=J_\alpha\vec v_\alpha,
\end{equation}

where $\alpha=a, b, c$. In the present post, we define the orientation of the grain as the eigenvector associated to the /largest/ eigenvalue. We can further define the equivalent ellipsoid as the ellipsoid with same volume and principal second moments. It can readily be verified that the volume and principal second moments of an ellipsoid are

\begin{equation}
  V=\frac{4\pi}3 abc,\quad J_a=\frac{Va^2}5,\quad J_b=\frac{Vb^2}5,\quad J_c=\frac{Vc^2}5,
\end{equation}

where $a$, $b$ and $c$ are the radii of the ellipsoid. The above expressions can be retrieved from [[https://en.wikipedia.org/wiki/Ellipsoid#Dynamical_properties][Wikipedia]] and Eq. \eqref{eq:4}. For example

\begin{equation}
J_a = \frac12\left(I_b+I_c-I_a\right).
\end{equation}

Then, the radii of the equivalent ellipsoid are retrieved as follows from the volume $V$ and the principal second moments $J_a$, $J_b$ and $J_c$ of the grain

\begin{equation}
a=\sqrt{\frac{5I_a}V},\quad b=\sqrt{\frac{5I_b}V},\quad c=\sqrt{\frac{5I_c}V}.
\end{equation}

The radii of the equivalent ellipsoid can be used to characterize the size of the grains. In the present post, we [[#morphological_description][compute for each grain]]: the volume, the center of mass, the tensor of second moments, the orientation and the radii of the equivalent ellipsoid. We will then perform rudimentary analysis of these morphological parameters.

As usual, we will use Python to carry out the dirty work. We will start with a [[#direct_computation][very naive approach]] and present a nearly [[#using_sum][loop-free approach]] using the clever =scipy.ndimage.sum= function. We start with loading the segmented images.

#+BEGIN_SRC ipython :results none
  import os.path

  import h5py
  import matplotlib.pyplot as plt
  import numpy as np
  import scipy.ndimage

  plt.style.use('../include/zenburn-light.mplstyle')

  filename = os.path.join('G:', 'sebastien', 'experimental_data',
                          'navier', 'riz', 'rice-bin_4x4x4.hdf5')

  with h5py.File(filename, 'r') as f:
      labels = np.asarray(f['labels'])

  indices = np.unique(labels)
  # Discard index 0, which is the background
  indices = indices[1:]
#+END_SRC

* Morphological description of the grains
  :PROPERTIES:
  :CUSTOM_ID: morphological_description
  :END:

** Direct computation of the morphological parameters of grain 42
   :PROPERTIES:
   :CUSTOM_ID: direct_computation
   :END:

The direct (naive) approach presented in this section will serve as a reference for a [[#using_sum][better approach]] presented in the next section. It will be illustrated on one grain only (namely grain [[https://en.wikipedia.org/wiki/42_%2528number%2529#The_Hitchhiker.27s_Guide_to_the_Galaxy][42]]), which we first locate. The remainder of the analysis is then restricted to a ROI surrounding the selected grain.

#+BEGIN_SRC ipython :results none
  index = 42
  slices = scipy.ndimage.find_objects(labels)[index-1]
  roi = labels[slices]
#+END_SRC

The grain shape is then defined by =mask=, an array of booleans, where all voxels of the ROI that belong to the grain are set to =True=.

#+BEGIN_SRC ipython :results none
  mask = roi == index
#+END_SRC

The volume (in voxels) of the grain is the sum of the above array

#+BEGIN_SRC ipython :results output
  vol_ref = mask.sum()
  print('Volume of grain {} = {} vox^3.'.format(index, vol_ref))
#+END_SRC

#+RESULTS:
: Volume of grain 42 = 7186 vox^3.

To compute the center of mass and inertia of the grain, we must define the coordinates of each voxel of the grain. To do so, we use the [[http://docs.scipy.org/doc/numpy/reference/generated/numpy.mgrid.html][mgrid]] function

#+BEGIN_SRC ipython :results none
  coords = np.mgrid[slices].astype(np.float64)
#+END_SRC

The center of mass of the grain is the sum of these coordinates divided by the total volume

#+BEGIN_SRC ipython :results output
  com_ref = np.sum(mask*coords, axis=(-1, -2, -3))/vol_ref
  print('Center of mass of grain {} = {} vox'.format(index, com_ref))
#+END_SRC

#+RESULTS:
: Center of mass of grain 42 = [   4.96688004  191.40801559  103.66824381] vox

Note that we pre-multiplied =coords= by =mask= in order to keep only those voxels that belong to the grain. To compute the inertia of the grain, we first subtract the coordinates of the center of mass from the voxel coordinates.

#+BEGIN_SRC ipython :results none
  coords -= com_ref[:, None, None, None]
#+END_SRC

We then compute the array of coordinates cross-products =coords_xprod= defined as follows

#+BEGIN_EXAMPLE
coords_xprod[m, n, i, j, k] = coords[m, i, j, k]*coords[n, i, j, k]
#+END_EXAMPLE

(=i, j, k=: voxel indices; =m, n=: coordinates indices). The =coords_xprod= array is produced by the following line of code

#+BEGIN_SRC ipython :results none
  coords_xprod = coords[None, ...]*coords[:, None, ...]
#+END_SRC

and we find

#+BEGIN_SRC ipython :results output
  moments2_ref = np.sum(mask*coords_xprod, axis=(-1, -2,-3))
  print('Moments of inertia of grain {} (vox^5)'.format(index))
  print(moments2_ref)
#+END_SRC

#+RESULTS:
: Moments of inertia of grain 42 (vox^5)
: [[  73912.1174506   -47088.89229056  -71887.95797384]
:  [ -47088.89229056  434923.69830225  180875.70915669]
:  [ -71887.95797384  180875.70915669  893659.09323685]]

This is a bit tedious, isn't it? Besides, we should normally loop over the grains in order to carry out the analysis for all grains. Comes the wonderful [[http://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.sum.html][scipy.ndimage.sum]] function to the rescue!

** Using the =scipy.ndimage.sum= function
   :PROPERTIES:
   :CUSTOM_ID: using_sum
   :END:

This function will allow us to carry out the analysis over all grains simultaneously. We start with the volume, which is seen as

\begin{equation*}
V=\sum_\text{Grain} 1,
\end{equation*}

where the sum is carried over all voxels of each grain.

#+BEGIN_SRC ipython :results none
  ones = np.ones_like(labels, dtype=np.float64)
  vol = scipy.ndimage.sum(ones, labels, indices)
#+END_SRC

And we can check that the value we found for grain 42 is correct

#+BEGIN_SRC ipython :results output
  print('Volume of grain {}'.format(index))
  print('    expected   = {}'.format(vol_ref))
  print('    actual     = {}'.format(vol[index-1]))
#+END_SRC

#+RESULTS:
: Volume of grain 42
:     expected   = 7186
:     actual     = 7186.0

For the center of mass, we will use the [[http://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.center_of_mass.html][center\_of\_mass]] function rather than the [[http://docs.scipy.org/doc/scipy/reference/generated/scipy.ndimage.sum.html][sum]] function.

#+BEGIN_SRC ipython :results output
  com = np.asarray(scipy.ndimage.center_of_mass(ones, labels, indices))
  print('Center of mass of grain {}'.format(index))
  print('    expected   = {}'.format(com_ref))
  print('    actual     = {}'.format(com[index-1]))
#+END_SRC

#+RESULTS:
: Center of mass of grain 42
:     expected   = [   4.96688004  191.40801559  103.66824381]
:     actual     = [   4.96688004  191.40801559  103.66824381]

Finally, the second moments are seen as the following sum

\begin{equation*}
J_{ij}=\sum_\text{Grain}(x_i-X_i)(x_j-X_j)=\sum_\text{Grain}x_ix_j-VX_iX_j,
\end{equation*}

where the last identity is known as the [[https://en.wikipedia.org/wiki/Parallel_axis_theorem][parallel axis theorem]]. Implementation of this formulation is straightforward, starting from the construction of the array of voxel coordinates  =coords=.

#+NAME: nested_loop
#+BEGIN_SRC ipython :results none
  coords = np.mgrid[[slice(n) for n in labels.shape]]
  moments2 = np.empty((indices.size, 3, 3), dtype=np.float64)

  for i in range(3):
      for j in range(3):
          xi, xj = coords[(i, j), :]
          moments2[:, i, j] = (scipy.ndimage.sum(xi*xj, labels, indices) -
                               vol*com[:, i]*com[:, j])
#+END_SRC

*Nota:* I could not find a pythonic way to get rid of this uggly nested loop...

We can again check that the result is correct for grain 42.

#+BEGIN_SRC ipython :results output
  print('Second moments of grain {}'.format(index))
  print('    expected =')
  print(moments2_ref)
  print('    actual =')
  print(moments2[index-1])
#+END_SRC

#+RESULTS:
: Second moments of grain 42
:     expected =
: [[  73912.1174506   -47088.89229056  -71887.95797384]
:  [ -47088.89229056  434923.69830225  180875.70915669]
:  [ -71887.95797384  180875.70915669  893659.09323685]]
:     actual =
: [[  73912.1174506   -47088.89229057  -71887.95797384]
:  [ -47088.89229057  434923.69830227  180875.70915669]
:  [ -71887.95797384  180875.70915669  893659.09323685]]

That's it! We have computed the second moments of each grain. See how this =sum= function is convenient? We are now ready to compute the orientation of each grain, as well as the radii of the equivalent ellipsoid. We first compute the eigenvalues and eigenvectors of the tensors of second moments.

#+BEGIN_SRC ipython :results none
  moments2_eigvals, moments2_eigvecs = np.linalg.eig(moments2)
#+END_SRC

It turns out that some of the eigenvalues that are found are negative (which is mathematically not possible)

#+BEGIN_SRC ipython :results output
  i = np.nonzero(moments2_eigvals < 0)
  print(i)
#+END_SRC

#+RESULTS:
: (array([  13, 1959], dtype=int64), array([2, 2], dtype=int64))

However, these eigenvalues are very small

#+BEGIN_SRC ipython :results output
  print(moments2_eigvals[i])
#+END_SRC

#+RESULTS:
: [ -4.88083585e-22  -1.02671800e-22]

and we set them to zero

#+BEGIN_SRC ipython :results none
  moments2_eigvals[i] = 0
#+END_SRC

The /orientation/ $\vec n$ of the grain is defined as the eigenvector associated with the largest principal second moment.

#+BEGIN_SRC ipython :results none
  i = np.argmax(moments2_eigvals, axis=1)
  rows = moments2.shape[0]
  n = moments2_eigvecs[np.arange(rows), 0:3, i]
#+END_SRC

The following code snippet computes the radii of each grain, and sorts them in ascending order.

#+BEGIN_SRC ipython :results none
  radius = np.sort(np.sqrt(5*moments2_eigvals/vol[:, None]))
#+END_SRC

We can now proceed with the analysis of the results. This will be done more thoroughly in the next instalment of this series. The present post will be restricted to basic analyses. But first of all, it is time to save our results!

#+BEGIN_SRC ipython :results none
  with h5py.File(filename, 'r+') as f:
      f['volume'] = vol
      f['center_of_mass'] = com
      f['radii'] = radius
      #f['orientation'] = n
#+END_SRC

* Analysis of the results

** Volume of grains

#+BEGIN_SRC ipython :results none
  fig, ax = plt.subplots()
  ax.set_xlabel(u'V (vox³)')
  ax.set_ylabel('Number')
  ax.hist(vol, range=(0, 12000), bins=30, linewidth=0)
  fig.savefig('./20160219-Orientation_correlations_among_rice_grains-07/volume_histogram.png', transparent=True)
#+END_SRC

[[./20160219-Orientation_correlations_among_rice_grains-07/volume_histogram.png]]

Most grains have a volume comprised between 6000 and 8000 vox³. It is observed that a significant number of grains are very small. There are two possible explanations for this

  1. some grains where broken in smaller pieces,
  2. our [[file:20150930-Orientation_correlations_among_rice_grains-06.org][segmentation]] was not perfect (over-segmentation might have occured).

My guess is that it is in fact a little bit of both. One possible remedy would be to filter out those grains that are too small in the subsequent analysis. We will not go into such degree of refinment.

** Size of the grains

In this section we visualize the radii of the equivalent ellipsoids

#+BEGIN_SRC ipython :results none
  fig, ax = plt.subplots()
  ax.hist(radius[:, -1], range=(0, 40), bins=40, linewidth=0)
  ax.set_xlabel('a (vox)')
  ax.set_ylabel('Number')
  fig.savefig('./20160219-Orientation_correlations_among_rice_grains-07/radius_a_histogram.png', transparent=True)

  fig, ax = plt.subplots()
  ax.hist((radius[:, -2], radius[:-1]), range=(0, 20), bins=20, linewidth=0)
  ax.set_xlabel('b, c (vox)')
  ax.set_ylabel('Number')
  fig.savefig('./20160219-Orientation_correlations_among_rice_grains-07/radii_b_c_histogram.png', transparent=True)
#+END_SRC

[[./20160219-Orientation_correlations_among_rice_grains-07/radius_a_histogram.png]]

[[./20160219-Orientation_correlations_among_rice_grains-07/radii_b_c_histogram.png]]

The length of most grains is about 2×27=54 pixels (about 6.5 mm). Also, the grains are /not/ spheroids: indeed $b\neq c$.

** Orientation of grains

This will be the topic of the next instalment of this series. We will only check for possible anisotropy by analysing the following second-order orientation tensor: $\langle\vec n\otimes\vec n\rangle$, where angle brackets stand for ensemble average. It can readily be verified that for isotropic distributions, this tensor is diagonal

\begin{equation*}
\langle\vec n\otimes\vec n\rangle=
\frac 13
\begin{bmatrix}
1 & 0 & 0\\
0 & 1 & 0\\
0 & 0 & 1
\end{bmatrix}.
\end{equation*}

Any deviation from this diagonal tensor indicates anisotropy (the converse is /not/ true!). Computation of this orientation tensor is easy

#+BEGIN_SRC ipython :results output
  nn = n[:, None, :]*n[:, :, None]
  nn_avg = nn.mean(axis=0)
  print(nn_avg)
#+END_SRC

#+RESULTS:
: [[ 0.27186448  0.02470892 -0.02490964]
:  [ 0.02470892  0.34850804 -0.00929047]
:  [-0.02490964 -0.00929047  0.37962748]]

Which shows that the distribution of grains is /not/ isotropic. Analysis of the eigenvalues of the orientation tensor would show that the vertical direction is in fact a direction of anisotropy (which should not come as a surprise)... but we will leave it like that for now!

* Conclusion

In this post, we have analysed the orientation of each grain. The orientation was defined as the orientation of the major axis of the equivalent ellipsoid. We are now ready to analyse orientation correlations among rice grains, which will be the topic of the [[file:./20160627-Orientation_correlations_among_rice_grains-08.org][next instalment]].
