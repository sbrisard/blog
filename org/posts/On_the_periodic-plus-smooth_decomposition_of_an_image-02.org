# -*- coding: utf-8; fill-column: 80 -*-
#+SETUPFILE: "../include/css-1.org"
#+SETUPFILE: "../include/mathjax.org"
#+SETUPFILE: "./On_the_periodic-plus-smooth_decomposition_of_an_image/setup.org"
#+OPTIONS: ':t
#+PROPERTY: header-args:ipython :session :eval no-export :exports both
#+TITLE: On the periodic-plus-smooth decomposition of an image, part 2: defining the decomposition
#+DATE: [2017-10-02 Mon]

In the [[sb-blog-01:][previous instalment]] of this series, we discussed the need for periodic
images. Although not all images are periodic, some image analysis techniques are
best performed in Fourier space (using the fast Fourier transform). Applying
Fourier-based techniques to images that are /not/ periodic (as is often the
case) generates artifacts. In order to reduce these artifacts, Moisan ([[moisan2011:][2011]])
proposed to construct a periodic image that is as close as possible to the
original image. For reasons that will become clearer in the remainder of this
post, he called the resulting construction the "periodic-plus-smooth
decomposition". We will define this decomposition in the remainder of this post, which is the second part in an eight-part series

#+INCLUDE: ./On_the_periodic-plus-smooth_decomposition_of_an_image/toc.org

As an appetizer, Figure [[fig:1]] shows the original image (left) and its periodic
(middle) and smooth components (right). Gray levels of the smooth component have
been rescaled so as to fit between 0 and 255. Most of this image is grayish,
meaning it is zero almost everywhere, except at the boundaries, where it
corrects the jumps induced by the lack of periodicity of the initial image.

#+HEADER: :var DATA_DIR=(cdr (assoc "sb-blog-data-dir" org-link-abbrev-alist-local))
#+BEGIN_SRC ipython :results none :exports none
  import numpy as np
  import scipy.misc

  from skimage.io import imread, imsave

  u = imread(DATA_DIR+'hut-648x364.png')
  u = u.astype(np.float64)

  from moisan2011 import rper
  p, s = rper(u, inverse_dft=True)

  p = p.astype(np.uint8)
  s_min, s_ptp = s.min(), s.ptp()
  s = (255*(s-s_min)/s_ptp).astype(np.uint8)

  imsave(DATA_DIR+'hut-648x364-periodic.png', p)
  imsave(DATA_DIR+'hut-648x364-smooth.png', s)
  imsave(DATA_DIR+'hut-648x364-periodic-fftshift.png', np.fft.fftshift(p))

  margin = 20
  m, n = u.shape
  img = np.empty((m, 3*n+2*margin), dtype=np.uint8)
  img[:, :] = 255
  img[:, :n] = u
  img[:, n+margin:2*n+margin] = p
  img[:, 2*n+2*margin:3*n+2*margin] = s
  imsave(DATA_DIR+'hut-648x364-periodic-plus-smooth.png', img)
#+END_SRC

#+CAPTION: Illustration of the periodic-plus-smooth decomposition of an image.
#+CAPTION: The original image (left), its periodic component (middle) and its
#+CAPTION: smooth (rescaled) component (right).
#+NAME: fig:1
#+ATTR_HTML: :width 100%
[[sb-blog-data-dir:hut-648x364-periodic-plus-smooth.png]]

* The decomposition as a minimization problem

Let $u$ be a $m\times n$ image. We want to find two images $p$ ("periodic"
component) and $s$ ("smooth" component), such that $u=p+s$ and

  1. $p$ minimizes jumps across boundaries (periodicity),
  2. $s$ minimizes jumps between neighbor pixels (smoothness),
  3. $p$ and $u$ have same mean value (conservation of brigthness).

In Moisan's work, neighbor pixels refer to the [[https://en.wikipedia.org/wiki/Pixel_connectivity#4-connected][4-connectivity]]. Furthermore, we
define

  - /direct/ neighbors, that are adjacent to the pixel under consideration
  - /indirect/ neighbors, that are periodic images of these neigbors that would
    normally fall outside the image.

Figure [[fig:direct_and_indirect_neighbors]] illustrates direct and indirect
neighbors. It shows that

  - corner pixels have 2 direct neighbors and 2 indirect neighbors,
  - off-corner, boundary pixels have 3 direct neighbors and 1 indirect neighbor,
  - off-boundary (inner) pixels have 4 direct neighbors.

#+CAPTION: Direct (blue) and indirect (green) neighbors of corner pixels
#+CAPTION: (orange, top row), off-corner, boundary pixels (orange, middle row)
#+CAPTION: and off-boundary pixels (orange, bottom row).
#+NAME: fig:direct_and_indirect_neighbors
#+ATTR_HTML: :width 90%
[[sb-blog-data-dir:direct_and_indirect_neighbors.svg]]

Now, we need to quantify how periodic is $p$, and how smooth is $s$. To do so,
we will define two energy functions: $E_\mathrm p$ and $E_\mathrm s$ that
penalize lack of periodicity and smoothness, respectively. More precisely,
$E_\mathrm p$ (resp. $E_\mathrm s$) is greater for less periodic (resp. less
smooth) $p$ (resp. $s$). The periodic-plus-smooth decomposition of an image $u$
is then defined as the pair of images $(p, s)$ that minimize the total energy
$E(p, s)=E_\mathrm p(p)+E_\mathrm s(s)$ under the constraints $u=p+s$ and
$\operatorname{mean}(s)=0$. The remainder of this post is dedicated to defining
the energies $E_\mathrm p$ and $E_\mathrm s$.

* How to penalize lack of periodicity?

For each pixel located at the boundary of an image, we compute the sum of
squared differences (SSD) with /indirect/ neighbors. The sum of all these SSDs
is the energy of the periodic component. Note that /direct/ neighbors are
excluded from this sum, as we focus here on the jumps across image
boundaries. This leads to the following expression

\begin{equation*}
\begin{aligned}[b]
E_\mathrm p(p)={}
&\underbrace{(p_{m-1, 0}-p_{0, 0})^2+(p_{0, n-1}-p_{0, 0})^2}_\text{top-left corner}\\
&+\underbrace{(p_{0, 0}-p_{0, n-1})^2+(p_{m-1, n-1}-p_{0, n-1})^2}_\text{top-right corner}\\
&+\underbrace{(p_{0, 0}-p_{m-1, 0})^2+(p_{m-1, n-1}-p_{m-1, 0})^2}_\text{bottom-left corner}\\
&+\underbrace{(p_{0, n-1}-p_{m-1, n-1})^2+(p_{m-1, 0}-p_{m-1, n-1})^2}_\text{bottom-right corner}\\
&+\underbrace{\sum_{i=1}^{m-2}(p_{i, n-1}-p_{i, 0})^2}_\text{left column}
+\underbrace{\sum_{i=1}^{m-2}(p_{i, 0}-p_{i, n-1})^2}_\text{right column}\\
&+\underbrace{\sum_{j=1}^{n-2}(p_{m-1, j}-p_{0, j})^2}_\text{top row}
+\underbrace{\sum_{j=1}^{n-2}(p_{0, j}-p_{m-1, j})^2}_\text{bottom row},
\end{aligned}
\end{equation*}

which reduces to

\begin{equation*}
E_\mathrm p(p)=2\sum_{i=0}^{m-1}(p_{i, n-1}-p_{i, 0})^2
+2\sum_{j=0}^{n-1}(p_{m-1, j}-p_{0, j})^2.
\end{equation*}

* How to penalize lack of smoothness?

At this point, you might have guessed that smoothness is measured through the
sum of squared differences between /direct/ neighbors

\begin{equation*}
E_\mathrm s(s)=\sum_{i=0}^{m-1}\sum_{j=0}^{n-1}\bigl[(s_{i, j-1}-s_{i, j})^2
+(s_{i, j+1}-s_{i, j})^2+(s_{i-1, j}-s_{i, j})^2+(s_{i+1, j}-s_{i, j})^2\bigr],
\end{equation*}

where we have defined the following ghost cells

\begin{equation*}
s_{i, -1}=s_{i, 0}, \quad s_{i, n}=s_{i, n-1}, \quad s_{-1, j}=s_{0, j}
\quad\text{and}\quad s_{m, j}=s_{m-1, j},
\end{equation*}

in order to make sure that indirect neighbors are indeed excluded. It is readily
observed that in the above sum, each pair of direct neighbors appears exactly
twice. In other words,

\begin{equation*}
E_\mathrm s(s)=2\sum_{i=0}^{m-2}\sum_{j=0}^{n-1}(s_{i+1, j}-s_{i, j})^2
+2\sum_{i=0}^{m-1}\sum_{j=0}^{n-2}(s_{i, j+1}-s_{i, j})^2.
\end{equation*}

* Python implementation

Implementation of the total energy $E(p, s)=E_\mathrm p(p)+E_\mathrm s(s)$ is
fairly trivial (note the use of the =broadcast_arrays=).

#+BEGIN_SRC python :eval no-export :exports results :results output code
  import inspect

  import moisan2011

  print(inspect.getsource(moisan2011.ssd))
  print()
  print(inspect.getsource(moisan2011.energy))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
def ssd(a, b):
    """Sum of squared differences."""
    delta2 = b-a
    delta2 *= delta2
    return np.sum(delta2)


def energy(p, s):
    """Return the total energy of the periodic-plus-smooth decomposition.

    The periodic and smooth components p and s are 2D arrays of
    float64. They should have the same shape, although this is not
    required by this function.  2D arrays.

    The energy is defined in Moisan (2011), Theorem 1. The
    contribution of the periodic component is

        E_p(p) = sum sum [p(x)-p(y)]**2,
                  x   y

    where the first sum is carried over all boundary pixels x, and the
    second sum is carried over the indirect neighbors y of x. The
    contribution of the smooth component is

        E_s(s) = sum sum [s(x)-s(y)]**2,
                  x   y

    where the first sum is carried over all pixels x, and the second
    sum is carried over the direct neighbors y of x. The total energy
    is then defined as

        E(p, s) = E_p(p) + E_s(s).
    """
    p, s = np.broadcast_arrays(p, s)
    return 2*(ssd(p[:, 0], p[:, -1]) +
              ssd(p[0, :], p[-1, :]) +
              ssd(s[:-1, :], s[1:, :]) +
              ssd(s[:, :-1], s[:, 1:]))

#+END_SRC

* An equivalent, unconstrained minimization problem

The periodic-plus-smooth decomposition $(p, s)$ of an image $u$ is defined as
the minimizer of the above defined energy $E(p, s)$, under the constraints:
$u=p+s$ and $\operatorname{mean}s=0$. Moisan ([[moisan2011:][2011]]) reformulates this
constrained minimization problem as the following unconstrained minimization
problem

\begin{equation*}
s=\operatorname*{arg\,min}_v F(v, u),
\quad\text{with}\quad
F(s, u)=E_\mathrm p(u-s)+E_\mathrm s(s)+(\operatorname{mean}s)^2,
\end{equation*}

and the periodic component $p$ reads: $p=u-s$. This is the minimization problem
that we will eventually solve.

* Conclusion

In the present post, we have defined the periodic-plus-smooth decomposition as
the minimizer of Moisan's energy, under the constraint that the average gray
level of the periodic component is equal to the average gray level of the
initial image.

Moisan ([[moisan2011:][2011]]) showed that this minimizer is explicit in Fourier space. In the
[[sb-blog-03:][next instalment]] of this series, we will however temporarily ignore this result,
and optimize the total energy in the real space, using standard iterative
techniques. This will allow us to generate reference decompositions that will
eventually be used to set up unit tests in order to check our implementation of
Moisan's method.
