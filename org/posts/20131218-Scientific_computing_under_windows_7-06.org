# -*- coding: utf-8; -*-
#+TITLE: Scientific computing under Windows 7, part 6: ITK (prerequisites)
#+DATE: <2013-12-18 Wed>

From the [[http://www.itk.org][official website]]

#+BEGIN_QUOTE
ITK is an open-source, cross-platform system that provides developers with an extensive suite of software tools for image analysis.  Developed through extreme programming methodologies, ITK employs leading-edge algorithms for registering and segmenting multidimensional data.
#+END_QUOTE

Building ITK under Windows 7 is quite a trip, and will actually require several posts. We start with all prerequisites for this project.@@html:<!-- more -->@@

* libjpeg

From the [[http://www.ijg.org/][official website]]

#+BEGIN_QUOTE
 IJG is an informal group that writes and distributes a widely used free library for JPEG image compression. The first version was released on 7-Oct-1991.
#+END_QUOTE

Download and unarchive the source code. Then, from the MSYS console

#+BEGIN_EXAMPLE
$ ./configure --prefix=/mingw
$ make
$ make install
#+END_EXAMPLE

* libpng

From the [[http://www.libpng.org/pub/png/libpng.html][official website]]

#+BEGIN_QUOTE
libpng is the official PNG reference library. It supports almost all PNG features, is extensible, and has been extensively tested for over 18 years.
#+END_QUOTE

Make sure you have installed the =mingw32-libz= (=dev= /and/ =dll=). Download and unarchive the source code. Then, from the MSYS console

#+BEGIN_EXAMPLE
$ ./configure --prefix=/mingw
$ make
$ make install
#+END_EXAMPLE

* libtiff

From the [[http://www.libtiff.org/][official website]]

#+BEGIN_QUOTE
 This software provides support for the Tag Image File Format (TIFF), a widely used format for storing image data. The latest version of the TIFF specification is available on-line in several different formats, as are a number of Technical Notes (TTN's).
#+END_QUOTE

Make sure you have installed the =mingw32-libzma= (=dev= /and/ =dll=). Download and unarchive the source code. Then, from the MSYS console.

#+BEGIN_EXAMPLE
./configure --prefix=/mingw
make
make install
#+END_EXAMPLE

* HDF5

From the [[http://www.hdfgroup.org/HDF5/][official website]]

#+BEGIN_QUOTE
HDF5 is a data model, library, and file format for storing and managing data. It supports an unlimited variety of datatypes, and is designed for flexible and efficient I/O and for high volume and complex data. HDF5 is portable and is extensible, allowing applications to evolve in their use of HDF5. The HDF5 Technology suite includes tools and applications for managing, manipulating, viewing, and analyzing data in the HDF5 format.
#+END_QUOTE

ITK ships with a version of HDF5 which it can compile automatically. However, compiling HDF5 from the ITK compilation process leads to errors

#+BEGIN_EXAMPLE
[ 16%] Building C object Modules/ThirdParty/HDF5/src/itkhdf5/src/CMakeFiles/H5detect.dir/H5detect.c.obj
In file included from c:\mingw\include\fcntl.h:37:0,
                 from C:\src\InsightToolkit-4.4.2\Modules\ThirdParty\HDF5\src\itkhdf5\src\H5private.h:55,
                 from C:\src\InsightToolkit-4.4.2\Modules\ThirdParty\HDF5\src\itkhdf5\src\H5detect.c:57:
c:\mingw\include\io.h:301:1: error: unknown type name 'off64_t'
 __CRT_INLINE off64_t lseek64 (int, off64_t, int);
 ^
c:\mingw\include\io.h:301:36: error: unknown type name 'off64_t'
 __CRT_INLINE off64_t lseek64 (int, off64_t, int);
                                    ^
c:\mingw\include\io.h:302:1: error: unknown type name 'off64_t'
 __CRT_INLINE off64_t lseek64 (int fd, off64_t offset, int whence) {
 ^
c:\mingw\include\io.h:302:39: error: unknown type name 'off64_t'
 __CRT_INLINE off64_t lseek64 (int fd, off64_t offset, int whence) {
                                       ^
In file included from C:\src\InsightToolkit-4.4.2\Modules\ThirdParty\HDF5\src\itkhdf5\src\H5private.h:72:0,
                 from C:\src\InsightToolkit-4.4.2\Modules\ThirdParty\HDF5\src\itkhdf5\src\H5detect.c:57:
c:\mingw\include\unistd.h:65:20: error: unknown type name 'off_t'
 int ftruncate(int, off_t);
                    ^
c:\mingw\include\unistd.h:67:38: error: unknown type name 'off_t'
 __CRT_INLINE int ftruncate(int __fd, off_t __length)
                                      ^
Modules\ThirdParty\HDF5\src\itkhdf5\src\CMakeFiles\H5detect.dir\build.make:57: recipe for target 'Modules/ThirdParty/HDF5/src/itkhdf5/src/CMakeFiles/H5detect.dir/H5detect.c.obj' failed
mingw32-make[2]: *** [Modules/ThirdParty/HDF5/src/itkhdf5/src/CMakeFiles/H5detect.dir/H5detect.c.obj] Error 1
CMakeFiles\Makefile2:6329: recipe for target 'Modules/ThirdParty/HDF5/src/itkhdf5/src/CMakeFiles/H5detect.dir/all' failed
mingw32-make[1]: *** [Modules/ThirdParty/HDF5/src/itkhdf5/src/CMakeFiles/H5detect.dir/all] Error 2
Makefile:135: recipe for target 'all' failed
mingw32-make: *** [all] Error 2
#+END_EXAMPLE

This seems to be caused by =H5_HAVE_WIN32_API= not being defined. From this [[http://lists.hdfgroup.org/pipermail/hdf-forum_lists.hdfgroup.org/2012-April/005692.html][mailing list]],

#+BEGIN_QUOTE
Rob,

   The defines should be in the generated H5pubconf.h file. However, because I
could only successfully test CMake on MinGW, I did not want to insert MinGW
checks into configure and not be able to verify them. End result is that those
defines must be added to your H5pubconf.h.  Also those defines are needed by
src/H5win32defs.h so that all the proper defines are set before the defines in
H5private.h/H5public.h.

Allen
#+END_QUOTE

Unfortunately, the fix proposed in the above mailing list does /not/ solve the problem. The solution is to download and install the pre-built binaries. Then, while compiling ITK, set =HDF5_DIR= appropriately.

* SWIG (Simplified Wrapper and Interface Generator)

From the [[http://www.swig.org/][official website]]

#+BEGIN_QUOTE
SWIG is a software development tool that connects programs written in C and C++ with a variety of high-level programming languages. SWIG is used with different types of target languages including common scripting languages such as Perl, PHP, Python, Tcl and Ruby.
#+END_QUOTE

As I would like to use ITK with Python, I need to build the Python bindings, which requires SWIG. Under Windows, the recommended procedure is to install the pre-built binaries (swigwin). Download the archive, and unzip it to the place of your choice (for example, =C:\opt\=). The executable program =swig.exe= should be available.

*Update*: I still have not managed to compile the Python bindings for ITK. So for the time being, installing SWIG is not really necessary.

* Doxygen

From the [[http://www.stack.nl/=dimitri/doxygen/index.html][official website]]

#+BEGIN_QUOTE
Doxygen is the de facto standard tool for generating documentation from annotated C++ sources, but it also supports other popular programming languages such as C, Objective-C, C#, PHP, Java, Python, IDL (Corba, Microsoft, and UNO/OpenOffice flavors), Fortran, VHDL, Tcl, and to some extent D.
#+END_QUOTE

Doxygen is required only if you plan to build the documentation of ITK. Use the windows installer.


* GCC-XML

From the [[http://gccxml.github.io/HTML/Index.html][official website]]

#+BEGIN_QUOTE
The purpose of the GCC-XML extension is to generate an XML description of a C++ program from GCC's internal representation. Since XML is easy to parse, other development tools will be able to work with C++ programs without the burden of a complicated C++ parser.
#+END_QUOTE

I am not entirely sure that GCC-XML is necessary for building ITK (I think in the end, I did not use it). ITK can install GCC-XML automatically. However, the automatic installation procedure failed under MinGW. I therefore installed GCC-XML manually, as a prerequisite. First, download the development version from Git

#+BEGIN_EXAMPLE
$ git clone git://github.com/gccxml/gccxml.git
#+END_EXAMPLE

Use CMake to generate the =Makefile=, then compile the sources

#+BEGIN_EXAMPLE
$ mingw32-make
$ mingw32-make install
#+END_EXAMPLE

Unfortunately, the =Makefile= does not provide an =uninstall= target. For the record, here is the list of files and directories which are created

  - =$CMAKE_INSTALL_PREFIX/bin/gccxml.exe=
  - =$CMAKE_INSTALL_PREFIX/bin/gccxml_cc1plus.exe=
  - =$CMAKE_INSTALL_PREFIX/bin/gccxml_vccconfig.bat=
  - =$CMAKE_INSTALL_PREFIX/bin/gccxml_vccconfig.exe=
  - =$CMAKE_INSTALL_PREFIX/share/doc/gccxml-0.9=
  - =$CMAKE_INSTALL_PREFIX/share/gccxml-0.9=
  - =$CMAKE_INSTALL_PREFIX/man/man1/gccxml.1=

* Conclusion

We are now ready to compile ITK itself... to be continued in the [[file:./20131219-Scientific_computing_under_windows_7-07.org][next installment]] of this series.
