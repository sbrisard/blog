# -*- coding: utf-8; fill-column: 79 -*-
#+SETUPFILE: "../include/css-1.org"
#+SETUPFILE: "../include/mathjax.org"
#+TITLE: On the periodic-plus-smooth decomposition of an image, part 6: minimizing the energy, the clever way
#+DATE: [2018-01-31 Wed]
#+LINK: moisan2011   https://doi.org/10.1007/s10851-010-0227-1
#+LINK: sb-blog-part-02 ./On_the_periodic-plus-smooth_decomposition_of_an_image-02.org
#+LINK: sb-blog-part-03 ./On_the_periodic-plus-smooth_decomposition_of_an_image-03.org
#+LINK: sb-blog-part-04 ./On_the_periodic-plus-smooth_decomposition_of_an_image-04.org
#+LINK: sb-blog-prev ./On_the_periodic-plus-smooth_decomposition_of_an_image-05.org
#+LINK: sb-blog-next ./On_the_periodic-plus-smooth_decomposition_of_an_image-07.org
#+LINK: sb-blog-data-dir ./On_the_periodic-plus-smooth_decomposition_of_an_image/
#+PROPERTY: header-args:ipython :session :eval no-export :exports both

In the [[sb-blog-prev:][previous instalment]] of this series, we computed Moisan's ([[moisan2011:][2011]])
periodic-plus-smooth decomposition of an image by means of the
[[https://en.wikipedia.org/wiki/Conjugate_gradient_method][conjugate gradient method]].
This worked like a charm, but was fairly inefficient, owing to the iterative
nature of the method. Moisan actually showed that the whole decomposition could
be computed explicitely in Fourier space. This will be discussed in the present
post.

Before we proceed, let us recall how the [[https://en.wikipedia.org/wiki/Discrete_Fourier_transform][discrete Fourier transform]] $\hat u$ of
the $m\times n$ image $u$ is defined

\begin{equation*}
\hat u_{\alpha\beta}=\sum_{i=0}^{m-1}\sum_{j=0}^{n-1}u_{ij}
\exp\Bigl[-2\pi\mathrm i\Bigl(\frac{\alpha i}m+\frac{\beta j}n\Bigr)\Bigr],
\end{equation*}

for $\alpha=0, \ldots, m-1$ and $\beta=0, \ldots, n-1$. We have the well-known
inversion formula

\begin{equation*}
u_{ij}=\frac1{mn}\sum_{\alpha=0}^{m-1}\sum_{\beta=0}^{n-1}\hat u_{\alpha\beta}
\exp\Bigl[2\pi\mathrm i\Bigl(\frac{\alpha i}m+\frac{\beta j}n\Bigr)\Bigr].
\end{equation*}

The remainder of this post is organized as follows. We will first introduce
[[algorithm][Moisan's algorithm]] ([[moisan2011:][2011]]). Then a [[implementation][first implementation]] of this algorithm will
be proposed. Improved implementations will be discussed in the [[sb-blog-next:][next instalment]]
of this series.

* Moisan's algorithm <<algorithm>>

It is recalled (see [[sb-blog-prev:][previous post]]) that the smooth component $s$ of a $m\times
n$ image $u$ is found from the solution to the following linear system

\begin{equation}
Q\cdot s=Q_1\cdot u,
\label{eq:1}
\end{equation}

where $Q$ and $Q_1$ are symmetric, positive linear operators defined in [[sb-blog-part-03:][part 3]]
of this series ($Q$ is actually positive definite). As observed in [[sb-blog-part-04:][part 4]] of
this series, operator $Q$ is in fact the sum of the periodic convolution
operator with the following kernel

\begin{equation*}
\begin{bmatrix}
0 & -2 & 0\\
-2 & 8 & -2\\
0 & -2 & 0
\end{bmatrix}
\end{equation*}

and the operator that maps any image $u$ onto the constant image equal to
$\operatorname{mean}u/mn$. It then results from the
[[https://en.wikipedia.org/wiki/Discrete_Fourier_transform#Circular_convolution_theorem_and_cross-correlation_theorem][circular convolution theorem]] that

\begin{equation}
(\widehat{Q\cdot s})_{\alpha\beta}=
\begin{cases}
m^{-2}n^{-2}\hat s_{00} & \text{if }(\alpha, \beta) = (0, 0),\\
\bigl(8-4\cos\frac{2\pi\alpha}m-4\cos\frac{2\pi\beta}n\bigr)
\hat s_{\alpha\beta} & \text{otherwise}.
\end{cases}
\label{eq:2}
\end{equation}

Combining Eqs. \eqref{eq:1} and \eqref{eq:2}, we find the following expression
of the discrete Fourier transform of the smooth component $s$
\begin{equation}
\hat s_{\alpha\beta}=\frac{\hat v_{\alpha\beta}}
{2\cos\frac{2\pi\alpha}m+2\cos\frac{2\pi\beta}n-4}
\quad\text{for}\quad
(\alpha, \beta)\neq(0, 0),
\label{eq:3}
\end{equation}

where we have introduced $v=-\frac12Q_1\cdot u$. Since $\operatorname{mean}s=0$,
we also have $\hat s_{00}=0$. From the definition of $Q_1$ (see [[sb-blog-part-03:][part 3]] of this
series), we have $v=v^\mathrm h+v^\mathrm v$, with

\begin{equation}
v^\mathrm h_{ij}=
\begin{cases}
u_{i, n-1}-u_{i, 0} & \text{if }j=0,\\
u_{i, 0}-u_{i, n-1} & \text{if }j=n-1,\\
0                   & \text{otherwise},
\end{cases}
\quad\text{and}\quad
v^\mathrm v_{ij}=
\begin{cases}
u_{m-1, j}-u_{0, j} & \text{if }i=0,\\
u_{0, j}-u_{m-1, j} & \text{if }i=m-1,\\
0                   & \text{otherwise}.
\end{cases}
\label{eq:4}
\end{equation}

Moisan's algorithm ([[moisan2011:][2011]]) readily follows from this analysis

  1. compute $v$ [use Eq. \eqref{eq:4}],
  2. compute its discrete Fourier transform $\hat v$,
  3. compute $\hat s$ [use Eq. \eqref{eq:3}],
  4. compute compute its inverse discrete Fourier transform $s$,
  5. compute $p=u-s$.

Of course, the [[https://en.wikipedia.org/wiki/Fast_Fourier_transform][fast Fourier transform]] will be used for steps 2 and 4.

* A first implementation of Moisan's algorithm <<implementation>>

Reference implementation of Moisan's algorithm results directly from the above
analysis.

#+BEGIN_SRC ipython :exports none :results silent
  import inspect

  from moisan2011 import _per
#+END_SRC

#+BEGIN_SRC ipython :exports results :results output code
  print(inspect.getsource(_per))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC ipython
def _per(u, inverse_dft=False):
    """Compute the periodic component of the 2D image u.

    This function returns the periodic-plus-smooth decomposition of
    the 2D array-like u.

    If inverse_dft is True, then the pair (p, s) is returned
    (p: periodic component; s: smooth component).

    If inverse_dft is False, then the pair (DFT[p], DFT[s]) is
    returned, where DFT denotes the discrete Fourier transform
    (with same conventions regarding sign and normalization as in the
    numpy.fft module).

    This is a reference (unoptimized) implementation of Algorithm 1.
    """
    u = np.asarray(u, dtype=np.float64)

    v = np.zeros_like(u)
    du = u[-1, :]-u[0, :]
    v[0, :] = du
    v[-1, :] = -du

    du = u[:, -1]-u[:, 0]
    v[:, 0] += du
    v[:, -1] -= du

    v_dft = np.fft.fft2(v)

    m, n = u.shape
    cos_m = np.cos(2.*np.pi*np.fft.fftfreq(m, 1.))
    cos_n = np.cos(2.*np.pi*np.fft.fftfreq(n, 1.))

    k_dft = 2.0*(cos_m[:, None]+cos_n[None, :]-2.0)
    k_dft[0, 0] = 1.0
    s_dft = v_dft/k_dft
    s_dft[0, 0] = 0.0

    if inverse_dft:
        s = np.fft.ifft2(s_dft)
        return u-s, s
    else:
        u_dft = np.fft.fft2(u)
        return u_dft-s_dft, s_dft

#+END_SRC

Which can be tested with the following image.

#+HEADER: :var DATA_DIR=(cdr (assoc "sb-blog-data-dir" org-link-abbrev-alist-local))
#+BEGIN_SRC ipython :results silent
  import numpy as np

  from skimage.io import imread, imsave

  u = imread(DATA_DIR+'hut-648x364.png')
  u = u.astype(np.float64)
#+END_SRC

#+ATTR_HTML: :width 80%
[[sb-blog-data-dir:hut-648x364.png]]

The periodic-plus-smooth decomposition is then computed as follows.

#+BEGIN_SRC ipython :results silent
  p, s = _per(u, inverse_dft=True)

  imsave(DATA_DIR+'hut-648x364-periodic-_per-fftshift.png',
         np.fft.fftshift(p.real).astype(np.uint8))
#+END_SRC

Which results in the following image ($p$ has been FFT-shifted, in order to
demonstrate the effect of periodization).

#+ATTR_HTML: :width 80%
[[sb-blog-data-dir:hut-648x364-periodic-_per-fftshift.png]]

* Conclusion
